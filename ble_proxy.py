import subprocess
import time
import argparse

def start_bluetooth_interface(interface):
    """
    Starts the Bluetooth interface.
    
    Args:
    - interface (str): The Bluetooth interface to start (e.g., 'hci0').
    """
    subprocess.run(['hciconfig', interface, 'up'])

def capture_ble_traffic(interface, capture_file, capture_duration):
    """
    Captures BLE traffic for a specified duration and saves it to a file.
    
    Args:
    - interface (str): The interface to capture from (e.g., 'hci0').
    - capture_file (str): The file to save the capture to.
    - capture_duration (int): The duration to capture for in seconds.
    """
    print(f"Starting BLE capture on interface {interface} for {capture_duration} seconds...")
    capture_command = ['btmon', '-i', interface]
    with open(capture_file, 'w') as f:
        process = subprocess.Popen(capture_command, stdout=f)
        time.sleep(capture_duration)
        process.terminate()
    print(f"Capture complete. Saved to {capture_file}")

def replay_ble_traffic(interface, capture_file):
    """
    Replays BLE traffic from a capture file.
    
    Args:
    - interface (str): The interface to use for replay (e.g., 'hci0').
    - capture_file (str): The capture file to replay.
    """
    print(f"Replaying BLE traffic from file {capture_file} on interface {interface}...")
    replay_command = ['btmgmt', '--index', interface, 'load', capture_file]
    subprocess.run(replay_command)
    print("Replay complete.")

def inject_custom_ble_packet(interface, dest_mac, handle, value):
    """
    Injects a custom BLE packet.
    
    Args:
    - interface (str): The interface to inject from (e.g., 'hci0').
    - dest_mac (str): The destination MAC address.
    - handle (str): The handle of the characteristic to write to.
    - value (str): The value to write (in hex).
    """
    print(f"Injecting custom BLE packet to {dest_mac} with handle {handle} and value {value}")
    inject_command = [
        'gatttool', '-i', interface, '-b', dest_mac, '--char-write-req', '--handle=' + handle, '--value=' + value
    ]
    subprocess.run(inject_command)
    print("Packet injection complete.")

def main():
    parser = argparse.ArgumentParser(description="BLE Traffic Capture and Injection Tool")
    parser.add_argument('--interface', type=str, required=True, help="The Bluetooth interface to use (e.g., 'hci0')")
    parser.add_argument('--capture-file', type=str, required=True, help="The file to save the capture to")
    parser.add_argument('--capture-duration', type=int, required=True, help="The duration to capture traffic (in seconds)")
    parser.add_argument('--dest-mac', type=str, required=True, help="The destination MAC address for the custom packet")
    parser.add_argument('--handle', type=str, required=True, help="The handle of the characteristic to write to")
    parser.add_argument('--value', type=str, required=True, help="The value to write (in hex)")

    args = parser.parse_args()

    # Start the Bluetooth interface
    start_bluetooth_interface(args.interface)

    # Capture BLE traffic
    capture_ble_traffic(args.interface, args.capture_file, args.capture_duration)

    # Replay the captured traffic
    replay_ble_traffic(args.interface, args.capture_file)

    # Inject a custom BLE packet
    inject_custom_ble_packet(args.interface, args.dest_mac, args.handle, args.value)

if __name__ == "__main__":
    main()
